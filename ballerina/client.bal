// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/http;
import ballerina/mime;

# Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.
public isolated client class Client {
    final http:Client clientEp;
    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string serviceUrl = "https://api.mistral.ai") returns error? {
        http:ClientConfiguration httpClientConfig = {auth: config.auth, httpVersion: config.httpVersion, timeout: config.timeout, forwarded: config.forwarded, poolConfig: config.poolConfig, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, validation: config.validation};
        do {
            if config.http1Settings is ClientHttp1Settings {
                ClientHttp1Settings settings = check config.http1Settings.ensureType(ClientHttp1Settings);
                httpClientConfig.http1Settings = {...settings};
            }
            if config.http2Settings is http:ClientHttp2Settings {
                httpClientConfig.http2Settings = check config.http2Settings.ensureType(http:ClientHttp2Settings);
            }
            if config.cache is http:CacheConfig {
                httpClientConfig.cache = check config.cache.ensureType(http:CacheConfig);
            }
            if config.responseLimits is http:ResponseLimitConfigs {
                httpClientConfig.responseLimits = check config.responseLimits.ensureType(http:ResponseLimitConfigs);
            }
            if config.secureSocket is http:ClientSecureSocket {
                httpClientConfig.secureSocket = check config.secureSocket.ensureType(http:ClientSecureSocket);
            }
            if config.proxy is http:ProxyConfig {
                httpClientConfig.proxy = check config.proxy.ensureType(http:ProxyConfig);
            }
        }
        http:Client httpEp = check new (serviceUrl, httpClientConfig);
        self.clientEp = httpEp;
        return;
    }

    # Delete File
    #
    # + headers - Headers to be sent with the request 
    # + return - OK 
    resource isolated function delete v1/files/[string file_id](map<string|string[]> headers = {}) returns DeleteFileOut|error {
        string resourcePath = string `/v1/files/${getEncodedUri(file_id)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Unarchive Fine Tuned Model
    #
    # + model_id - The ID of the model to unarchive.
    # + headers - Headers to be sent with the request 
    # + return - OK 
    resource isolated function delete v1/fine_tuning/models/[string model_id]/archive(map<string|string[]> headers = {}) returns UnarchiveFTModelOut|error {
        string resourcePath = string `/v1/fine_tuning/models/${getEncodedUri(model_id)}/archive`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Delete Model
    #
    # + model_id - The ID of the model to delete.
    # + headers - Headers to be sent with the request 
    # + return - Successful Response 
    resource isolated function delete v1/models/[string model_id](map<string|string[]> headers = {}) returns DeleteModelOut|error {
        string resourcePath = string `/v1/models/${getEncodedUri(model_id)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # List Files
    #
    # + headers - Headers to be sent with the request 
    # + return - OK 
    resource isolated function get v1/files(map<string|string[]> headers = {}) returns ListFilesOut|error {
        string resourcePath = string `/v1/files`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieve File
    #
    # + headers - Headers to be sent with the request 
    # + return - OK 
    resource isolated function get v1/files/[string file_id](map<string|string[]> headers = {}) returns RetrieveFileOut|error {
        string resourcePath = string `/v1/files/${getEncodedUri(file_id)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Fine Tuning Jobs
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - OK 
    resource isolated function get v1/fine_tuning/jobs(map<string|string[]> headers = {}, *Jobs_api_routes_fine_tuning_get_fine_tuning_jobsQueries queries) returns JobsOut|error {
        string resourcePath = string `/v1/fine_tuning/jobs`;
        map<Encoding> queryParamEncoding = {"model": {style: FORM, explode: true}, "created_after": {style: FORM, explode: true}, "status": {style: FORM, explode: true}, "wandb_project": {style: FORM, explode: true}, "wandb_name": {style: FORM, explode: true}, "suffix": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Fine Tuning Job
    #
    # + job_id - The ID of the job to analyse.
    # + headers - Headers to be sent with the request 
    # + return - OK 
    resource isolated function get v1/fine_tuning/jobs/[string job_id](map<string|string[]> headers = {}) returns DetailedJobOut|error {
        string resourcePath = string `/v1/fine_tuning/jobs/${getEncodedUri(job_id)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # List Models
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful Response 
    resource isolated function get v1/models(map<string|string[]> headers = {}) returns ModelList|error {
        string resourcePath = string `/v1/models`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieve Model
    #
    # + model_id - The ID of the model to retrieve.
    # + headers - Headers to be sent with the request 
    # + return - Successful Response 
    resource isolated function get v1/models/[string model_id](map<string|string[]> headers = {}) returns BaseModelCard|FTModelCard|error {
        string resourcePath = string `/v1/models/${getEncodedUri(model_id)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Update Fine Tuned Model
    #
    # + model_id - The ID of the model to update.
    # + headers - Headers to be sent with the request 
    # + return - OK 
    resource isolated function patch v1/fine_tuning/models/[string model_id](UpdateFTModelIn payload, map<string|string[]> headers = {}) returns FTModelOut|error {
        string resourcePath = string `/v1/fine_tuning/models/${getEncodedUri(model_id)}`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Agents Completion
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful Response 
    resource isolated function post v1/agents/completions(AgentsCompletionRequest payload, map<string|string[]> headers = {}) returns ChatCompletionResponse|error {
        string resourcePath = string `/v1/agents/completions`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Chat Completion
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful Response 
    resource isolated function post v1/chat/completions(ChatCompletionRequest payload, map<string|string[]> headers = {}) returns ChatCompletionResponse|error {
        string resourcePath = string `/v1/chat/completions`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Embeddings
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful Response 
    resource isolated function post v1/embeddings(EmbeddingRequest payload, map<string|string[]> headers = {}) returns EmbeddingResponse|error {
        string resourcePath = string `/v1/embeddings`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Upload File
    #
    # + headers - Headers to be sent with the request 
    # + return - OK 
    resource isolated function post v1/files(MultiPartBodyParams payload, map<string|string[]> headers = {}) returns UploadFileOut|error {
        string resourcePath = string `/v1/files`;
        http:Request request = new;
        mime:Entity[] bodyParts = check createBodyParts(payload);
        request.setBodyParts(bodyParts);
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Fim Completion
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful Response 
    resource isolated function post v1/fim/completions(FIMCompletionRequest payload, map<string|string[]> headers = {}) returns FIMCompletionResponse|error {
        string resourcePath = string `/v1/fim/completions`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Create Fine Tuning Job
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - OK 
    resource isolated function post v1/fine_tuning/jobs(JobIn payload, map<string|string[]> headers = {}, *Jobs_api_routes_fine_tuning_create_fine_tuning_jobQueries queries) returns JobOut|LegacyJobMetadataOut|error {
        string resourcePath = string `/v1/fine_tuning/jobs`;
        map<Encoding> queryParamEncoding = {"dry_run": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post v1/fine_tuning/jobs/[string job_id]/'start(map<string|string[]> headers = {}) returns DetailedJobOut|error {
        string resourcePath = string `/v1/fine_tuning/jobs/${getEncodedUri(job_id)}/start`;
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Cancel Fine Tuning Job
    #
    # + job_id - The ID of the job to cancel.
    # + headers - Headers to be sent with the request 
    # + return - OK 
    resource isolated function post v1/fine_tuning/jobs/[string job_id]/cancel(map<string|string[]> headers = {}) returns DetailedJobOut|error {
        string resourcePath = string `/v1/fine_tuning/jobs/${getEncodedUri(job_id)}/cancel`;
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Archive Fine Tuned Model
    #
    # + model_id - The ID of the model to archive.
    # + headers - Headers to be sent with the request 
    # + return - OK 
    resource isolated function post v1/fine_tuning/models/[string model_id]/archive(map<string|string[]> headers = {}) returns ArchiveFTModelOut|error {
        string resourcePath = string `/v1/fine_tuning/models/${getEncodedUri(model_id)}/archive`;
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }
}
